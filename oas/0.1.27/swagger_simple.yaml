openapi: 3.0.0
info:
  version: "0.1.27"
  title: Blockfrost.io ~ API Documentation
  x-logo:
    url: https://staging.blockfrost.io/images/logo.svg
    altText: Blockfrost
  contact:
    name: Blockfrost Team
    url: "https://blockfrost.io"
    email: contact@blockfrost.io
  license:
    name: MIT
    url: "https://opensource.org/licenses/MIT"
  termsOfService: "https://blockfrost.io/terms"
  description: |
    Blockfrost is an API as a service that allows users to interact with the Cardano blockchain and parts of its ecosystem.

servers:
  - url: https://cardano-mainnet.blockfrost.io/api/v0/
    description: Cardano Mainnet network
  - url: https://cardano-testnet.blockfrost.io/api/v0/
    description: Cardano Testnet network
  - url: https://localhost:3000
    description: local

security:
  - ApiKeyAuth: []

tags:
  - name: Health
  - name: Cardano » Blocks
  - name: Cardano » Epochs
  - name: Cardano » Pools

paths:
  /:
    get:
      tags:
        - Health
      summary: Root endpoint
      description: |
        Root endpoint has no other function than to point end users to documentation.
      responses:
        "200":
          description: Information pointing to the documentation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: "https://blockfrost.io/"
                  version:
                    type: string
                    example: "0.1.0"
                required:
                  - url
                  - version
        "400":
          $ref: "#/components/responses/bad_request"
        "403":
          $ref: "#/components/responses/unauthorized_error"
        "429":
          $ref: "#/components/responses/overusage_limit"
        "418":
          $ref: "#/components/responses/autobanned"
        "500":
          $ref: "#/components/responses/internal_server_error"

  /health:
    get:
      tags:
        - Health
      summary: Backend health status
      description: |
        Return backend status as a boolean. Your application
            should handle situations when backend for the given chain is unavailable.
      responses:
        "200":
          description: Return the boolean indicating the health of the backend.
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_healthy:
                    type: boolean
                    example: true
                required:
                  - is_healthy
        "400":
          $ref: "#/components/responses/bad_request"
        "403":
          $ref: "#/components/responses/unauthorized_error"
        "429":
          $ref: "#/components/responses/overusage_limit"
        "418":
          $ref: "#/components/responses/autobanned"
        "500":
          $ref: "#/components/responses/internal_server_error"

  /health/clock:
    get:
      tags:
        - Health
      summary: Current backend time
      description: |
        This endpoint provides the current UNIX time. Your application might
        use this to verify if the client clock is not out of sync.
      responses:
        "200":
          description: Return the current UNIX time in milliseconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  server_time:
                    type: integer
                    format: int64
                    example: 1603400958947
                required:
                  - server_time
        "400":
          $ref: "#/components/responses/bad_request"
        "403":
          $ref: "#/components/responses/unauthorized_error"
        "429":
          $ref: "#/components/responses/overusage_limit"
        "418":
          $ref: "#/components/responses/autobanned"
        "500":
          $ref: "#/components/responses/internal_server_error"

  /blocks/latest:
    get:
      tags:
        - Cardano » Blocks
      summary: Latest block
      description: |
        Return the latest block available to the backends, also known as the
        tip of the blockchain.
      responses:
        "200":
          description: Return the contents of the latest block.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/block_content"
        "400":
          $ref: "#/components/responses/bad_request"
        "403":
          $ref: "#/components/responses/unauthorized_error"
        "404":
          $ref: "#/components/responses/not_found"
        "429":
          $ref: "#/components/responses/overusage_limit"
        "418":
          $ref: "#/components/responses/autobanned"
        "500":
          $ref: "#/components/responses/internal_server_error"

  /blocks/{hash_or_number}/next:
    get:
      tags:
        - Cardano » Blocks
      summary: Listing of next blocks
      description: |
        Return the list of blocks following a specific block.
      parameters:
        - in: path
          name: hash_or_number
          required: true
          schema:
            type: string
            format: 64-character case-sensitive hexadecimal string or block number.
          description: Hash of the requested block.
          example: "5ea1ba291e8eef538635a53e59fddba7810d1679631cc3aed7c8e6c4091a516a"
        - in: query
          name: count
          required: false
          schema:
            type: integer
            maximum: 100
            default: 100
          description: The number of results displayed on one page.
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: The page number for listing the results.
      responses:
        "200":
          description: Return the contents of the block.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/block_content_array"
        "400":
          $ref: "#/components/responses/bad_request"
        "403":
          $ref: "#/components/responses/unauthorized_error"
        "404":
          $ref: "#/components/responses/not_found"
        "429":
          $ref: "#/components/responses/overusage_limit"
        "418":
          $ref: "#/components/responses/autobanned"
        "500":
          $ref: "#/components/responses/internal_server_error"
  /epochs/latest:
    get:
      tags:
        - Cardano » Epochs
      summary: Latest epoch
      description: Return the information about the latest, therefore current, epoch.
      responses:
        "200":
          description: Return the data about the epoch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/epoch_content"
        "400":
          $ref: "#/components/responses/bad_request"
        "403":
          $ref: "#/components/responses/unauthorized_error"
        "404":
          $ref: "#/components/responses/not_found"
        "429":
          $ref: "#/components/responses/overusage_limit"
        "418":
          $ref: "#/components/responses/autobanned"
        "500":
          $ref: "#/components/responses/internal_server_error"
  /pools/{pool_id}/metadata:
    get:
      tags:
        - Cardano » Pools
      summary: Stake pool metadata
      description: |
        Stake pool registration metadata.
      parameters:
        - in: path
          name: pool_id
          required: true
          schema:
            type: string
          description: Bech32 or hexadecimal pool ID.
          example: "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
      responses:
        "200":
          description: Return the pool metadata content.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/pool_metadata"
                  - $ref: "#/components/schemas/empty_object"
        "400":
          $ref: "#/components/responses/bad_request"
        "403":
          $ref: "#/components/responses/unauthorized_error"
        "404":
          $ref: "#/components/responses/not_found"
        "429":
          $ref: "#/components/responses/overusage_limit"
        "418":
          $ref: "#/components/responses/autobanned"
        "500":
          $ref: "#/components/responses/internal_server_error"
components:
  responses:
    overusage_limit:
      description: Usage limit reached
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 429
              error:
                type: string
                example: "Project Over Limit"
              message:
                type: string
                example: "Usage is over limit."
            required:
              - status_code
              - error
              - message

    autobanned:
      description: IP has been auto-banned for extensive sending of requests after usage limit has been reached
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 418
              error:
                type: string
                example: "Requested Banned"
              message:
                type: string
                example: "IP has been auto-banned for flooding."
            required:
              - status_code
              - error
              - message

    not_found:
      description: Component not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 404
              error:
                type: string
                example: "Not Found"
              message:
                type: string
                example: "The requested component has not been found."
            required:
              - status_code
              - error
              - message

    internal_server_error:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 500
              error:
                type: string
                example: "Internal Server Error"
              message:
                type: string
                example: "An unexpected response was received from the backend."
            required:
              - status_code
              - error
              - message

    unauthorized_error:
      description: Authentication secret is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 403
              error:
                type: string
                example: "Forbidden"
              message:
                type: string
                example: "Invalid project token."
            required:
              - status_code
              - error
              - message

    bad_request:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 400
              error:
                type: string
                example: "Bad Request"
              message:
                type: string
                example: "Backend did not understand your request."
            required:
              - status_code
              - error
              - message

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: project_id
      description: |
        There are multiple token types available based on network you choose
        when creating a Blockfrost a project, for a list of token types
        see [Available networks](#section/Available-networks)

  schemas:
    block_content_array:
      type: array
      items:
        $ref: "#/components/schemas/block_content"
    block_content:
      type: object
      properties:
        time:
          type: integer
          example: 1641338934
          description: Block creation time in UNIX time
        height:
          type: integer
          nullable: true
          example: 15243593
          description: Block number
        hash:
          type: string
          example: "4ea1ba291e8eef538635a53e59fddba7810d1679631cc3aed7c8e6c4091a516a"
          description: Hash of the block
        slot:
          type: integer
          nullable: true
          example: 412162133
          description: Slot number
        epoch:
          type: integer
          nullable: true
          example: 425
          description: Epoch number
        epoch_slot:
          type: integer
          nullable: true
          example: 12
          description: Slot within the epoch
        slot_leader:
          type: string
          example: "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2qnikdy"
          description: Bech32 ID of the slot leader or specific block description in case there is no slot leader
        size:
          type: integer
          example: 3
          description: Block size in Bytes
        tx_count:
          type: integer
          example: 1
          description: Number of transactions in the block
        output:
          type: string
          nullable: true
          example: "128314491794"
          description: Total output within the block in Lovelaces
        fees:
          type: string
          nullable: true
          example: "592661"
          description: Total fees within the block in Lovelaces
        block_vrf:
          type: string
          nullable: true
          example: "vrf_vk1wf2k6lhujezqcfe00l6zetxpnmh9n6mwhpmhm0dvfh3fxgmdnrfqkms8ty"
          description: VRF key of the block
          minLength: 65
          maxLength: 65
        previous_block:
          type: string
          nullable: true
          example: "43ebccb3ac72c7cebd0d9b755a4b08412c9f5dcb81b8a0ad1e3c197d29d47b05"
          description: Hash of the previous block
        next_block:
          type: string
          nullable: true
          example: "8367f026cf4b03e116ff8ee5daf149b55ba5a6ec6dec04803b8dc317721d15fa"
          description: Hash of the next block
        confirmations:
          type: integer
          example: 4698
          description: Number of block confirmations
      required:
        - time
        - height
        - hash
        - slot
        - epoch
        - epoch_slot
        - slot_leader
        - size
        - tx_count
        - output
        - fees
        - block_vrf
        - previous_block
        - next_block
        - confirmations
    epoch_content_array:
        type: array
        items:
        $ref: "#/components/schemas/epoch_content"
    epoch_content:
        type: object
        properties:
        epoch:
            type: integer
            example: 225
            description: Epoch number
        start_time:
            type: integer
            example: 1603403091
            description: Unix time of the start of the epoch
        end_time:
            type: integer
            example: 1603835086
            description: Unix time of the end of the epoch
        first_block_time:
            type: integer
            example: 1603403092
            description: Unix time of the first block of the epoch
        last_block_time:
            type: integer
            example: 1603835084
            description: Unix time of the last block of the epoch
        block_count:
            type: integer
            example: 21298
            description: Number of blocks within the epoch
        tx_count:
            type: integer
            example: 17856
            description: Number of transactions within the epoch
        output:
            type: string
            example: "7849943934049314"
            description: Sum of all the transactions within the epoch in Lovelaces
        fees:
            type: string
            example: "4203312194"
            description: Sum of all the fees within the epoch in Lovelaces
        active_stake:
            nullable: true
            type: string
            example: "784953934049314"
            description: Sum of all the active stakes within the epoch in Lovelaces
        required:
        - epoch
        - start_time
        - end_time
        - first_block_time
        - last_block_time
        - block_count
        - tx_count
        - output
        - fees
        - active_stake 
    pool_metadata:
      type: object
      properties:
        pool_id:
          type: string
          example: "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
          description: Bech32 pool ID
        hex:
          type: string
          example: "0f292fcaa02b8b2f9b3c8f9fd8e0bb21abedb692a6d5058df3ef2735"
          description: Hexadecimal pool ID
        url:
          type: string
          nullable: true
          example: "https://stakenuts.com/mainnet.json"
          description: URL to the stake pool metadata
        hash:
          type: string
          nullable: true
          example: "47c0c68cb57f4a5b4a87bad896fc274678e7aea98e200fa14a1cb40c0cab1d8c"
          description: Hash of the metadata file
        ticker:
          type: string
          nullable: true
          example: "NUTS"
          description: Ticker of the stake pool
        name:
          type: string
          nullable: true
          example: "Stake Nuts"
          description: Name of the stake pool
        description:
          type: string
          nullable: true
          example: "The best pool ever"
          description: Description of the stake pool
        homepage:
          type: string
          nullable: true
          example: "https://stakentus.com/"
          description: Home page of the stake pool
      required:
        - pool_id
        - hex
        - url
        - hash
        - ticker
        - name
        - description
        - homepage
    network:
      type: object
      properties:
        supply:
          type: object
          properties:
            max:
              type: string
              description: Maximum supply in Lovelaces
              example: "45000000000000000"
            total:
              type: string
              description: Current total (max supply - reserves) supply in Lovelaces
              example: "32890715183299160"
            circulating:
              type: string
              description: Current circulating (UTXOs + withdrawables) supply in Lovelaces
              example: "32412601976210393"
            locked:
              type: string
              description: Curent locked supply by scripts in Lovelaces
              example: "125006953355"
          required:
            - max
            - total
            - circulating
            - locked
        stake:
          type: object
          properties:
            live:
              type: string
              example: "23204950463991654"
              description: Current live stake in Lovelaces
            active:
              type: string
              description: Current active stake in Lovelaces
              example: "22210233523456321"
          required:
            - live
            - active
      required:
        - supply
        - stake

    empty_object:
      type: object
