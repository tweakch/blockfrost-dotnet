/* 
 * Blockfrost.io ~ API Documentation
 *
 * Blockfrost is an API as a service that allows users to interact with the Cardano blockchain and parts of its ecosystem.  ## Tokens  After signing up on https://blockfrost.io, a `project_id` token is automatically generated for each project. HTTP header of your request MUST include this `project_id` in order to authenticate against Blockfrost servers.  ## Available networks  At the moment, you can use the following networks. Please, note that each network has its own `project_id`.  <table>   <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>   <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.blockfrost.io/api/v0</td></tt></tr>   <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.blockfrost.io/api/v0</tt></td></tr>   <tr><td>InterPlanetary File System</td><td><tt>https://ipfs.blockfrost.io/api/v0</tt></td></tr> </table>  ## Concepts  * All endpoints return either a JSON object or an array. * Data is returned in *ascending* (oldest first, newest last) order.   * You might use the `?order=desc` query parameter to reverse this order. * By default, we return 100 results at a time. You have to use `?page=2` to list through the results. * All time and timestamp related fields (except `server_time`) are in seconds of UNIX time. * All amounts are returned in Lovelaces, where 1 ADA = 1 000 000 Lovelaces. * Addresses, accounts and pool IDs are in Bech32 format. * All values are case sensitive. * All hex encoded values are lower case. * Examples are not based on real data. Any resemblance to actual events is purely coincidental. * We allow to upload files up to 100MB of size to IPFS. This might increase in the future.  ## Errors  ### HTTP Status codes  The following are HTTP status code your application might receive when reaching Blockfrost endpoints and it should handle all of these cases.  * HTTP `400` return code is used when the request is not valid. * HTTP `402` return code is used when the projects exceed their daily request limit. * HTTP `403` return code is used when the request is not authenticated. * HTTP `404` return code is used when the resource doesn't exist. * HTTP `418` return code is used when the user has been auto-banned for flooding too much after previously receiving error code `402` or `429`. * HTTP `429` return code is used when the user has sent too many requests in a given amount of time and therefore has been rate-limited. * HTTP `500` return code is used when our endpoints are having a problem.  ### Error codes  An internal error code number is used for better indication of the error in question. It is passed using the following payload.  ```json {   \"status_code\": 403,   \"error\": \"Forbidden\",   \"message\": \"Invalid project token.\" } ``` ## Limits   There are two types of limits we are enforcing:   The first depends on your plan and is the number of request we allow per day. We defined the day from midnight to midnight of UTC time.   The second is rate limiting. We limit an end user, distinguished by IP address, to 10 requests per second. On top of that, we allow  each user to send burst of 500 requests, which cools off at rate of 10 requests per second. In essence, a user is allowed to make another  whole burst after (currently) 500/10 = 50 seconds. E.g. if a user attemtps to make a call 3 seconds after whole burst, 30 requests will be processed.  We believe this should be sufficient for most of the use cases. If it is not and you have a specific use case, please get in touch with us, and  we will make sure to take it into account as much as we can.   ## SDKs  We support a number of SDKs that will help you in developing your application on top of Blockfrost.  <table>   <tr><td><b>Programming language</b></td><td><b>SDK</b></td></tr>   <tr><td>JavaScript</td><td><a href=\"https://github.com/blockfrost/blockfrost-js\">blockfrost-js</a></tr> </table> 
 *
 * OpenAPI spec version: 0.1.26
 * Contact: contact@blockfrost.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

// using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Blockfrost.Api.Gen.Services;
using Blockfrost.Api.Gen.Model;
using Blockfrost.Api.Gen.Client;
using System.Reflection;
using System.Text.Json;

namespace Blockfrost.Api.Gen.Test
{
    /// <summary>
    ///  Class for testing EpochParamContent
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class EpochParamContentTests
    {
        // TODO uncomment below to declare an instance variable for EpochParamContent
        //private EpochParamContent instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of EpochParamContent
            //instance = new EpochParamContent();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of EpochParamContent
        /// </summary>
        [Test]
        public void EpochParamContentInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" EpochParamContent
            //Assert.IsInstanceOfType<EpochParamContent> (instance, "variable 'instance' is a EpochParamContent");
        }


        /// <summary>
        /// Test the property 'Epoch'
        /// </summary>
        [Test]
        public void EpochTest()
        {
            // TODO unit test for the property 'Epoch'
        }
        /// <summary>
        /// Test the property 'MinFeeA'
        /// </summary>
        [Test]
        public void MinFeeATest()
        {
            // TODO unit test for the property 'MinFeeA'
        }
        /// <summary>
        /// Test the property 'MinFeeB'
        /// </summary>
        [Test]
        public void MinFeeBTest()
        {
            // TODO unit test for the property 'MinFeeB'
        }
        /// <summary>
        /// Test the property 'MaxBlockSize'
        /// </summary>
        [Test]
        public void MaxBlockSizeTest()
        {
            // TODO unit test for the property 'MaxBlockSize'
        }
        /// <summary>
        /// Test the property 'MaxTxSize'
        /// </summary>
        [Test]
        public void MaxTxSizeTest()
        {
            // TODO unit test for the property 'MaxTxSize'
        }
        /// <summary>
        /// Test the property 'MaxBlockHeaderSize'
        /// </summary>
        [Test]
        public void MaxBlockHeaderSizeTest()
        {
            // TODO unit test for the property 'MaxBlockHeaderSize'
        }
        /// <summary>
        /// Test the property 'KeyDeposit'
        /// </summary>
        [Test]
        public void KeyDepositTest()
        {
            // TODO unit test for the property 'KeyDeposit'
        }
        /// <summary>
        /// Test the property 'PoolDeposit'
        /// </summary>
        [Test]
        public void PoolDepositTest()
        {
            // TODO unit test for the property 'PoolDeposit'
        }
        /// <summary>
        /// Test the property 'EMax'
        /// </summary>
        [Test]
        public void EMaxTest()
        {
            // TODO unit test for the property 'EMax'
        }
        /// <summary>
        /// Test the property 'NOpt'
        /// </summary>
        [Test]
        public void NOptTest()
        {
            // TODO unit test for the property 'NOpt'
        }
        /// <summary>
        /// Test the property 'A0'
        /// </summary>
        [Test]
        public void A0Test()
        {
            // TODO unit test for the property 'A0'
        }
        /// <summary>
        /// Test the property 'Rho'
        /// </summary>
        [Test]
        public void RhoTest()
        {
            // TODO unit test for the property 'Rho'
        }
        /// <summary>
        /// Test the property 'Tau'
        /// </summary>
        [Test]
        public void TauTest()
        {
            // TODO unit test for the property 'Tau'
        }
        /// <summary>
        /// Test the property 'DecentralisationParam'
        /// </summary>
        [Test]
        public void DecentralisationParamTest()
        {
            // TODO unit test for the property 'DecentralisationParam'
        }
        /// <summary>
        /// Test the property 'ExtraEntropy'
        /// </summary>
        [Test]
        public void ExtraEntropyTest()
        {
            // TODO unit test for the property 'ExtraEntropy'
        }
        /// <summary>
        /// Test the property 'ProtocolMajorVer'
        /// </summary>
        [Test]
        public void ProtocolMajorVerTest()
        {
            // TODO unit test for the property 'ProtocolMajorVer'
        }
        /// <summary>
        /// Test the property 'ProtocolMinorVer'
        /// </summary>
        [Test]
        public void ProtocolMinorVerTest()
        {
            // TODO unit test for the property 'ProtocolMinorVer'
        }
        /// <summary>
        /// Test the property 'MinUtxo'
        /// </summary>
        [Test]
        public void MinUtxoTest()
        {
            // TODO unit test for the property 'MinUtxo'
        }
        /// <summary>
        /// Test the property 'MinPoolCost'
        /// </summary>
        [Test]
        public void MinPoolCostTest()
        {
            // TODO unit test for the property 'MinPoolCost'
        }
        /// <summary>
        /// Test the property 'Nonce'
        /// </summary>
        [Test]
        public void NonceTest()
        {
            // TODO unit test for the property 'Nonce'
        }

    }

}
